#!/usr/bin/env bash
# Script to create folders for an experiment.
# Creates folders based in the rule YYYYMMDD[A-Z][01-99].
# Appends also an info file and goes inside the first directory

# Default parameters.
FOLDERNAMES=(tau steps eif)
FILENAME="experiment.txt"
FILENAME_CP=".experiment"
AGE="NA"
PIPETTE[0]="NA"
CFAST[0]="NA"
BRIDGE[0]="AEC"
CELLS[0]="PC"
BRAIN_AREA="Cerebellum_Vermis"
AUTHOR=`getent passwd $USER | cut -d ':' -f 5| cut -d ',' -f 1`
PROJECT="pkj_sin"
AMPLIFIER=$prot_setup

usage()
{
    echo
    echo "create_experiment_folder"
    echo "    Creates an directory tree for an experiment."
    echo
    echo "Usage : `basename $0` [options <value>]"
    echo
    echo "where options are:"
    echo
    echo "   -h   display this help message"
    echo "   -t   cell type (default = $CELL)"
    echo "   -r   brain region (default = $BRAIN_AREA)"
    echo "        NOTE: if multiple names are used the directory tree will contain cell[N]"
    echo "        Names must be separate by commas and have no spaces!"
    echo "   -a   Age of the animal/culture (default = $AGE)" 
    echo "   -p   Pipette resistance before patch (default = $PIPETTE)" 
    echo "   -c   Resistance compensation (default = $BRIDGE)" 
    echo "   -C   Capacitance compensation (default = $CFAST)" 
    echo "   -P   Project code (default = $PROJECT)"
    echo "   -A   Author/Experimenter (default = $AUTHOR)"
    echo "   -m   Amplifier used in the experiment (default = $AMPLIFIER)"
    echo "   --simultaneous creates only one folder for multiple cells "
}

make_subfolders()
{
    for f in ${FOLDERNAMES[@]}
    do
            mkdir -p $f/01
    done

}
write_info_file()
{
    echo "date = "`date` > $5
    echo "author = "$AUTHOR > $5
    echo "project = "$PROJECT >> $5
    echo "cell_type = "$1 >> $5
    echo "pipette_resistance = "$2 >> $5
    echo "bridge_balance = "$3 >> $5
    echo "cap_compensation = "$4 >> $5
    echo "brain_area = "$BRAIN_AREA >> $5
    echo "age = "$AGE >> $5
    echo "amplifier = "$AMPLIFIER >> $5
}

# Find out the name of the directory.
code=A
directory=`date +%Y%m%d`${code}01
while [ -d $directory ] ; do
	code=$(echo $code | tr 'A-Y' 'B-Z')
	directory=`date +%Y%m%d`${code}01
done

# Parse the input arguments

set -f; IFS=,
while getopts ":t:r:a:p:c:C:P:A:m:h" opt ; do
    case $opt in
	t)
	    CELLS=($OPTARG)
        ;;
	r)
	    BRAIN_AREA=$OPTARG
	    ;;
	a)
	    AGE=$OPTARG
	    ;;
	p)
	    PIPETTE=($OPTARG)
	    ;;
	c)
	    BRIDGE=($OPTARG)
	    ;;
	C)
	    CFAST=($OPTARG)
	    ;;
    P)
	    PROJECT=$OPTARG
	    ;;
    A)
	    AUTHOR=$OPTARG
	    ;;
	m)
	    AMPLIFIER=$OPTARG
	    ;;
	h)
	    usage
	    exit 0
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG."
	    echo "Type `basename $0` -h for help."
	    exit 1
	    ;;
    esac
done
set +f; unset IFS

# Are there multiple cells?
simultaneous="no"
if [[ ${#CELLS[@]} -ge 2 ]]
then
    if [ $simultaneous -eq "no" ]
    then
        for ((i=0; i < ${#CELLS[@]} ; i++))
        do
            # Fix parameters.
            if [[ -z ${PIPETTE[$i]} ]]
            then
                PIPETTE[$i]=${PIPETTE[0]}
#               echo Missing value of pipette resistance value! Using ${PIPETTE[$i]}
            fi
            if [[ -z ${BRIDGE[$i]} ]]
            then
                BRIDGE[$i]=${BRIDGE[0]}
#               echo Missing value bridge balance! Using ${BRIDGE[$i]}.
            fi
            if [[ -z ${CFAST[$i]} ]]
            then
                CFAST[$i]=${CFAST[0]}
        #       echo Missing CFAST value! Using ${CFAST[$i]}
            fi

            folder="$directory"/cell"$(printf %02d $(($i+1)))"
            mkdir -p $folder
            cd $folder
            echo
            echo +++++++++++ $folder +++++++++++ 
            write_info_file ${CELLS[$i]} ${PIPETTE[$i]} ${BRIDGE[$i]} ${CFAST[$i]} $FILENAME
            write_info_file ${CELLS[$i]} ${PIPETTE[$i]} ${BRIDGE[$i]} ${CFAST[$i]} $FILENAME_CP
            cat $FILENAME
            make_subfolders
            cd ../../
        done
	fi
else
    folder="$directory"
    mkdir -p $folder
    cd $folder
    SAVE_IFS=$IFS
    IFS=","
    echo +++++++++++ $folder +++++++++++ 
    write_info_file ${CELLS[*]} ${PIPETTE[*]} ${BRIDGE[*]} ${CFAST[*]} $FILENAME
    write_info_file ${CELLS[*]} ${PIPETTE[*]} ${BRIDGE[*]} ${CFAST[*]} $FILENAME_CP
    cat $FILENAME
    IFS=$SAVE_IFS
    make_subfolders
fi
echo 
echo ++++++++++++++++++++++++++++++ 
echo Created directory tree in $directory

