#!/usr/bin/env python

import os
import sys
import getopt
import lcg
import aec
import subprocess as sub
import numpy as np
import glob
import matplotlib
from matplotlib import pyplot as plt

matplotlib.rc('axes',edgecolor='w',labelcolor='w')
matplotlib.rc('ytick',color='w')
matplotlib.rc('xtick',color='k')


description='''
Uses MatplotLib to plot a trace from an h5 file.
'''
usage='{0}\n'.format(description)

default_options={'filename':[],
                 'downsample':4,
                 'kernel':[],
                 'stack':True}
cc=[[0,1,0],
    [1,0,0],
    [0,0,1],
    [0,1,1],
    [1,1,0],
    [1,1,1],
    [0,0.7,0.6],
    [0.5,1,0],
    [0,0.5,1],
    [0.5,0.5,0.5],
    [1,0.3,0],
    [0.3,0,0.3]]
def parse_options():
    opt = default_options.copy()
    try:
        opts,args = getopt.getopt(sys.argv[1:], 'hf:d:k:',['help','no-stack'])
    except:
        print(usage)
        print(str(err))
        sys.exit(1)
    for o,a in opts:
        if o in ['help','-h','--help']:
            print usage
            sys.exit(1)
        if o in ['-f']:
            opt['filename'] = [b for b in a.split(',')]
        if o in ['-k']:
            opt['kernel'] = [b for b in a.split(',')]
        if o in ['-d']:
            opt['downsample'] = float(a)
        if o in ['--no-stack']:
            opt['stack'] = False
    return opt

def plot_entities(ax,time,ent,offset=0,points=None,downsample=2,color=[1,1,1]):
    if points is None:
        points = len(ent[0]['data'])
    for i,e in enumerate(ent):
        ax[i].plot(time[offset:points:downsample],
                   e['data'][offset:points:downsample],color=color)

def main():
    opts = parse_options()
    fig = plt.figure(facecolor='k')
    ax = []
    for k,f in enumerate(opts['filename']):
        if os.path.exists(f):
            ent,info = lcg.loadH5Trace(f)
            time = np.linspace(0,info['tend'],len(ent[1]['data']))
            if len(opts['kernel']) > 0:
                # Active Electrode Compensation offline
                names = [e['name'] for e in ent]
                try:
                    Iidx = names.index('Waveform')
                except ValueError:
                    Iidx = names.index('AnalogOutput')
                try:
                    Vidx = names.index('RealNeuron')
                except ValueError:
                    Vidx = names.index('AnalogInput')
                if type(Iidx) is int:
                    Iidx = [Iidx]
                if type(Vidx) is int:
                    Vidx = [Vidx]
                for i,kfile in enumerate(opts['kernel']):
                    Ke = np.loadtxt(kfile)
                    ent[Vidx[i]]['data'] = aec.compensate(ent[Vidx[i]]['data'],
                                                          ent[Iidx[i]]['data'],
                                                          Ke*1e-9)
            if len(ax) == 0:
                ax.append(fig.add_subplot(len(ent),1,1, axisbg='k'))
                for i in range(1,len(ent)):
                    ax.append(fig.add_subplot(len(ent),1,i+1, sharex=ax[0], axisbg='k'))
            plot_entities(ax,time,ent,0,None,opts['downsample'],color=cc[k])
        else:
            print('File {0} not found!'.format(f))

    [t.set_color('white') for t in ax[-1].xaxis.get_ticklines()]
    [t.set_color('white') for t in ax[-1].xaxis.get_ticklabels()]
    for a in ax:
        a.grid(True,color=[0.3,0.3,0.3])

    plt.show()

if __name__ in ['__main__']:
    main()
