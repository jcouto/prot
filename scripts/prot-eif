#! /usr/bin/env bash
#
# Protocol to inject noise to characterize the dIV curves.
#
amp=30
sd=150
tau=4

dur=40

T=1
n=2
i=5

offset=20
kernel=$prot_kernel
prot=$prot_prot
figures=$prot_figures
headstage="both"

usage="EIF protocol. Injects current noise in cell \n
to charactherize the dynamic IV curve. Sums 2 waveforms...\n
    Usage : `basename $0` [options <value>]\n
\n
    Options:\n
        \t-a amplitude		      Amplitude of the noise.\n
        \t   ($amp pA)				.\n
        \t-s standard deviation   Standard deviation of the noise.\n
        \t   ($sd pA )			  Percentage of the amplitude (if bellow zero).\n
        \t-T time constant		  Time constant of the noise.\n
        \t   ($tau ms)       Specify the start, stop and step values.\n
        \t-d duration             Duration of the step.\n
        \t  ($dur sec)\n         
        \t-t tail                 Duration before and after the step.\n
        \t  ($T sec)\n
        \t-i interval             Interval to wait between trials.\n
        \t  ($i sec)\n
        \t-n repetitions          Number of repetitions of each trial.\n
        \t  ($n)\n
        \t-H headstage            Headstage to use.\n
        \t  ($headstage)\n
        \t-h,--help               Display this help message and quit.\n
        \t--(no-)kernel			  (Does not) compute the kernel\n
        \t--(no-)prot             (Does not) run the steps\n
        \t--(no-)figures          (Does not) analyze the data\n
        \t 
    Examples:\n

"
if ! options=$(getopt -o ha:d:t:T:struct:i:o:n:H: --long no-kernel,kernel,no-prot,prot,no-figures,figures -- "$@")
then
    echo -e $usage
    exit 1
fi

eval set -- "$options"

while [ $# -gt 0 ]
do
    case $1 in
    -h) echo -e $usage
        exit 0 ;;
    --no-kernel) kernel="no" ;;
    --kernel) kernel="yes" ;;
    --no-prot) prot="no" ;;
    --prot) prot="yes" ;;
    --no-figures) figures="no" ;;
    --figures) figures="yes" ;;
    # for options with required arguments, an additional shift is required
    -a) amp=$2 ; shift;;
    -s) sd=$2 ; shift;;
    -T) tau=$2 ; shift;;
    -d) dur=$2 ; shift;;
    -t) T=$2 ; shift;;
    -i) i=$2 ; shift;;
    -n) n=$2 ; shift;;
    -H) headstage=$2 ; shift;;
    --) shift; break;;
    -*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    *) break;;
    esac
    shift
done

if [ $headstage == "both" ]
then
    for i in `seq 0 1`; do
        prot_set_headstage $i "cc"
        ai[$i]=$AI_CHANNEL
        ao[$i]=$AO_CHANNEL
        aiunits[$i]=$INPUT_UNITS
        aounits[$i]=$OUTPUT_UNITS
        aifactors[$i]=$AI_CONVERSION_FACTOR
        aofactors[$i]=$AO_CONVERSION_FACTOR
    done
    SAVE_IFS=$IFS
    IFS=","
    if [ $kernel == "yes" ] ; then
        kernel=""
    else
        kernel="--no-kernel"
    fi
    echo "lcg-stimgen DC --P1 $amp -d $dur -t $T -i $i -n $n -F $prot_srate $kernel -I ${ai[*]} -O ${ao[*]}  --Iu ${aiunits[*]} --Ou ${aounits[*]} --If ${aifactors[*]} --Of ${aofactors[*]} -o $offset -Ks $prot_kernel_sd" 
    eval "lcg-stimgen DC --P1 $amp -d $dur -t $T -i $i -n $n -F $prot_srate $kernel -I ${ai[*]} -O ${ao[*]}  --Iu ${aiunits[*]} --Ou ${aounits[*]} --If ${aifactors[*]} --Of ${aofactors[*]} -o $offset -Ks $prot_kernel_sd" 
    IFS=$SAVE_IFS
else
    prot_set_headstage $headstage "cc"

    if [ $kernel == "yes" ] ; then
	    lcg-kernel -s $prot_kernel_sd -I $AI_CHANNEL -O $AO_CHANNEL -F $prot_srate
    fi

    if [ $prot == "yes" ] ; then
	
	    lcg-ou -m $amp -s $sd -t $tau -d $dur -D $T \
            -i $i -n $n -F $prot_srate --no-kernel
    fi

    if [ $figures == "yes" ] ; then
        matlab -nodesktop -nosplash < $PROTDIR/matlab/analize_eif_protocol.m
    fi
fi
